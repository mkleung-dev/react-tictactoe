{"version":3,"sources":["index.js"],"names":["Square","props","className","format","onClick","value","Board","i","this","squares","formats","table","row","rowItem","col","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","setInterval","list","minimax","maxPlayer","currPlayer","otherPlayer","winner","calculateWinner","checkDraw","maxValue","index","length","tempSquares","slice","possibleList","minValue","Math","floor","random","handleClick","setState","concat","motion","highlightWinner","step","status","current","moves","map","_step","move","stepFormat","desc","parseInt","key","jumpTo","moveHistory","handleManualClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d60bc22.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className={props.format} onClick={props.onClick} >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square value={this.props.squares[i]} format={this.props.formats[i]} onClick={() => this.props.onClick(i)}/>\n    );\n  }\n\n  render() {\n    let table = []\n    for (let row = 0; row < 3; row++) {\n      let rowItem = []\n      for (let col = 0; col < 3; col++) {\n        rowItem.push(this.renderSquare(row * 3 + col))\n      }\n      table.push(<div className=\"board-row\">{rowItem}</div>)\n    }\n    return (\n      <div>{table}</div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      formats: Array(9).fill('square'),\n      stepNumber: 0,\n      xIsNext: false,\n    };\n    setInterval(() => {\n      if (!this.state.xIsNext) {\n        //var list = alphabetaPrunning('0', '0',  -99999, 99999, this.state.history[this.state.stepNumber].squares);\n        var list = minimax('0', '0',  this.state.history[this.state.stepNumber].squares);\n        var index = Math.floor(Math.random() * list.length);\n        this.handleClick(list[index][1]);\n      }\n    }, 100);\n  }\n\n  handleManualClick(i) {\n    if (this.state.xIsNext) {\n      this.handleClick(i)\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : '0';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        motion: i\n      }]),\n      formats: highlightWinner(squares),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      formats: highlightWinner(this.state.history[step].squares),\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  render() {\n    const formats = this.state.formats;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((_step, move) => {\n      const stepFormat = move === this.state.stepNumber ? 'currStep' : 'nonCurrStep'\n      const desc = move ?\n        'Go to move #' + move + ' (' + history[move].motion % 3 + ',' + parseInt(history[move].motion / 3, 10) + ')':\n        'Go to game start';\n      return (\n          <li key={move}>\n            <button className={stepFormat} onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n      );\n    });\n\n    let moveHistory = []\n    moveHistory.push(<ol>{moves}</ol>)\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (checkDraw(current.squares)) {\n      status = 'Draw';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} formats={formats} onClick={(i) => this.handleManualClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          {moveHistory}\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction minimax(maxPlayer, currPlayer, squares) {\n  var otherPlayer = (currPlayer === 'X') ? '0' : 'X';\n  var winner = calculateWinner(squares);\n  if (winner === maxPlayer) {\n    return [[1, -1]];\n  } else if (checkDraw(squares)) {\n    return [[0, -1]];\n  } else if (winner !== null) {\n    return [[-1, -1]];\n  }\n\n  var list = [];\n  if (maxPlayer === currPlayer) {\n    var maxValue = -99999\n    for (var index = 0; index < squares.length; index++) {\n      if (squares[index] === null) {\n        var tempSquares = squares.slice();\n        tempSquares[index] = currPlayer\n        var possibleList = minimax(maxPlayer, otherPlayer, tempSquares)\n        if (possibleList[0][0] > maxValue) {\n          list = []\n          maxValue = possibleList[0][0]\n          list.push([maxValue, index])\n        } else if (possibleList[0][0] === maxValue) {\n          list.push([maxValue, index])\n        }\n      }\n    }\n  } else {\n    var minValue = 99999\n    for (var index = 0; index < squares.length; index++) {\n      if (squares[index] === null) {\n        var tempSquares = squares.slice();\n        tempSquares[index] = currPlayer\n        var possibleList = minimax(maxPlayer, otherPlayer, tempSquares)\n        if (possibleList[0][0] < minValue) {\n          list = []\n          minValue = possibleList[0][0]\n          list.push([minValue, index])\n        } else if (possibleList[0][0] === minValue) {\n          list.push([minValue, index])\n        }\n      }\n    }\n  }\n  return list;\n}\n\nfunction alphabetaPrunning(maxPlayer, currPlayer, alpha, beta, squares) {\n  var otherPlayer = (currPlayer === 'X') ? '0' : 'X';\n  var winner = calculateWinner(squares);\n  if (winner === maxPlayer) {\n    return [[1, -1]];\n  } else if (checkDraw(squares)) {\n    return [[0, -1]];\n  } else if (winner !== null) {\n    return [[-1, -1]];\n  }\n\n  var list = [];\n  if (maxPlayer === currPlayer) {\n    var maxValue = -99999\n    for (var index = 0; index < squares.length; index++) {\n      if (squares[index] === null) {\n        var tempSquares = squares.slice();\n        tempSquares[index] = currPlayer\n        var possibleList = alphabetaPrunning(maxPlayer, otherPlayer, alpha, beta, tempSquares)\n        if (possibleList[0][0] > maxValue) {\n          list = []\n          maxValue = possibleList[0][0]\n          list.push([maxValue, index])\n        } else if (possibleList[0][0] === maxValue) {\n          list.push([maxValue, index])\n        }\n        if (maxValue > alpha) {\n          alpha = maxValue\n        }\n        if (alpha >= beta) {\n          break;\n        }\n      }\n    }\n  } else {\n    var minValue = 99999\n    for (var index = 0; index < squares.length; index++) {\n      if (squares[index] === null) {\n        var tempSquares = squares.slice();\n        tempSquares[index] = currPlayer\n        var possibleList = alphabetaPrunning(maxPlayer, otherPlayer, alpha, beta, tempSquares)\n        if (possibleList[0][0] < minValue) {\n          list = []\n          minValue = possibleList[0][0]\n          list.push([minValue, index])\n        } else if (possibleList[0][0] === minValue) {\n          list.push([minValue, index])\n        }\n        if (minValue < beta) {\n          beta = minValue\n        }\n        if (alpha >= beta) {\n          break;\n        }\n      }\n    }\n  }\n  return list;\n}\n\nfunction highlightWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  var formats = [\n    'square', 'square', 'square',\n    'square', 'square', 'square',\n    'square', 'square', 'square'\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      formats[a] = 'squareHighlighted'\n      formats[b] = 'squareHighlighted'\n      formats[c] = 'squareHighlighted'\n    }\n  }\n  return formats;\n}\n\nfunction checkDraw(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true\n}"],"sourceRoot":""}