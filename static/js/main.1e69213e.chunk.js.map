{"version":3,"sources":["index.js"],"names":["Square","props","className","format","onClick","value","Board","i","this","squares","formats","table","row","rowItem","col","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","xIsPlayer","xIsFirstSet","xIsPlayerSet","intervalTimer","event","setState","target","setInterval","p","list","minimax","maxPlayer","currPlayer","otherPlayer","winner","calculateWinner","checkDraw","maxValue","index","length","tempSquares","slice","possibleList","minValue","Math","floor","random","handleClick","clearInterval","concat","motion","highlightWinner","step","playerStatus","status","current","moves","map","_step","move","stepFormat","desc","parseInt","key","jumpTo","moveHistory","endGame","onChange","setPlayer","bind","type","name","checked","disabled","isStarted","setFirst","startGame","handleManualClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e69213e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className={props.format} onClick={props.onClick} >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square value={this.props.squares[i]} format={this.props.formats[i]} onClick={() => this.props.onClick(i)}/>\n    );\n  }\n\n  render() {\n    let table = []\n    for (let row = 0; row < 3; row++) {\n      let rowItem = []\n      for (let col = 0; col < 3; col++) {\n        rowItem.push(this.renderSquare(row * 3 + col))\n      }\n      table.push(<div className=\"board-row\">{rowItem}</div>)\n    }\n    return (\n      <div>{table}</div>\n    );\n  }\n}\n\nfunction YouAre(props) {\n  return (\n    <button className={props.format} onClick={props.onClick} >\n      {props.value}\n    </button>\n  );\n}\n\nfunction StartFirst(props) {\n  return (\n    <button className={props.format} onClick={props.onClick} >\n      {props.value}\n    </button>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      formats: Array(9).fill('square'),\n      stepNumber: 0,\n      xIsNext: true,\n      xIsPlayer: false,\n      xIsFirstSet: false,\n      xIsPlayerSet: false,\n      intervalTimer: null\n    };\n  }\n\n  setPlayer(event) {\n    this.setState({\n      xIsPlayerSet: event.target.value === '1'\n    });\n  }\n  setFirst(event) {\n    this.setState({\n      xIsFirstSet: event.target.value === '1'\n    });\n  }\n\n\n  isStarted() {\n    return (null !== this.state.intervalTimer);\n  }\n\n  startGame() {\n    this.setState({\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      formats: Array(9).fill('square'),\n      stepNumber: 0,\n      xIsNext: this.state.xIsFirstSet,\n      xIsPlayer: this.state.xIsPlayerSet\n    });\n\n    if (!this.state.intervalTimer) {\n      this.setState({\n        intervalTimer: setInterval(() => {\n          if ((!this.state.xIsNext && this.state.xIsPlayer) || (this.state.xIsNext && !this.state.xIsPlayer)) {\n            var p = this.state.xIsPlayer ? 'O' : 'X';\n            //var list = alphabetaPrunning(p, p,  -99999, 99999, this.state.history[this.state.stepNumber].squares);\n            var list = minimax(p, p,  this.state.history[this.state.stepNumber].squares);\n            var index = Math.floor(Math.random() * list.length);\n            this.handleClick(list[index][1]);\n          }\n        }, 100)\n      });\n    }\n  }\n\n  endGame() {\n    if (null !== this.state.intervalTimer) {\n      clearInterval(this.state.intervalTimer);\n      this.setState({\n        intervalTimer: null\n      });\n    }\n  }\n\n  handleManualClick(i) {\n    if ((this.state.xIsNext && this.state.xIsPlayer) || (!this.state.xIsNext && !this.state.xIsPlayer)) {\n      this.handleClick(i)\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        motion: i\n      }]),\n      formats: highlightWinner(squares),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    if ((step - this.state.stepNumber) % 2 === 0) {\n    } else {\n      this.setState({\n        xIsNext: !this.state.xIsNext,\n      });\n\n    }\n    this.setState({\n      formats: highlightWinner(this.state.history[step].squares),\n      stepNumber: step\n    });\n  }\n\n  render() {\n    const formats = this.state.formats;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((_step, move) => {\n      const stepFormat = move === this.state.stepNumber ? 'currStep' : 'nonCurrStep'\n      const desc = move ?\n        'Go to move ' + move + ' (' + history[move].motion % 3 + ',' + parseInt(history[move].motion / 3, 10) + ')':\n        'Go to game start';\n      return (\n          <li key={move}>\n            <button className={stepFormat} onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n      );\n    });\n\n    let moveHistory = []\n    moveHistory.push(<ol>{moves}</ol>)\n\n    let playerStatus;\n    if (this.state.xIsPlayer) {\n      playerStatus = 'Player: X';\n    } else {\n      playerStatus = 'Player: O';\n    }\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n      this.endGame();\n    } else if (checkDraw(current.squares)) {\n      status = 'Draw';\n      this.endGame();\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <table>\n          <tbody>\n            <tr><th>Tic Tac Toe</th></tr>\n            <tr><td>\n              <div className=\"game-controller\">\n              <div onChange={this.setPlayer.bind(this)}>\n                You are:\n                <input type=\"radio\" value=\"0\" name=\"xIsPlayer\" checked={!this.state.xIsPlayerSet} disabled={this.isStarted()}/> O\n                <input type=\"radio\" value=\"1\" name=\"xIsPlayer\" checked={this.state.xIsPlayerSet} disabled={this.isStarted()}/> X\n              </div>\n              <div onChange={this.setFirst.bind(this)}>\n                Start first:\n                <input type=\"radio\" value=\"0\" name=\"xIsFirst\" checked={!this.state.xIsFirstSet} disabled={this.isStarted()}/> O\n                <input type=\"radio\" value=\"1\" name=\"xIsFirst\" checked={this.state.xIsFirstSet} disabled={this.isStarted()}/> X\n              </div>\n\n              <button className=\"game-start\" onClick={() => this.startGame()} disabled={this.isStarted()}>Start</button>\n              <button className=\"game-start\" onClick={() => this.endGame()} disabled={!this.isStarted()}>End</button>\n              </div>\n            </td></tr>\n            <tr><td>\n              <div className=\"game-board\">\n                <Board squares={current.squares} formats={formats} onClick={(i) => this.handleManualClick(i)} />\n              </div>\n            </td></tr>\n            <tr><td>\n              <div className=\"game-info\">\n                <div>{playerStatus}</div>\n                <div>{status}</div>\n                History:\n                {moveHistory}\n              </div>\n            </td></tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction printBoard(squares) {\n  var boardString = \"\"\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      boardString = boardString + \" \";\n    } else {\n      boardString = boardString + squares[i];\n    }\n    if (i % 3 === 2) {\n      boardString = boardString + \"\\n\";\n    }\n  }\n}\n\nfunction minimax(maxPlayer, currPlayer, squares) {\n  var otherPlayer = (currPlayer === 'X') ? 'O' : 'X';\n  var winner = calculateWinner(squares);\n  if (winner === maxPlayer) {\n    return [[1, -1]];\n  } else if (winner !== null) {\n    return [[-1, -1]];\n  } else if (checkDraw(squares)) {\n    return [[0, -1]];\n  }\n\n  var list = [];\n  if (maxPlayer === currPlayer) {\n    var maxValue = -99999\n    for (var index = 0; index < squares.length; index++) {\n      if (squares[index] === null) {\n        var tempSquares = squares.slice();\n        tempSquares[index] = currPlayer\n        var possibleList = minimax(maxPlayer, otherPlayer, tempSquares)\n        if (possibleList[0][0] > maxValue) {\n          list = []\n          maxValue = possibleList[0][0]\n          list.push([maxValue, index])\n        } else if (possibleList[0][0] === maxValue) {\n          list.push([maxValue, index])\n        }\n      }\n    }\n    //console.log(\"maximax,\" + maxValue);\n  } else {\n    var minValue = 99999\n    for (var index = 0; index < squares.length; index++) {\n      if (squares[index] === null) {\n        var tempSquares = squares.slice();\n        tempSquares[index] = currPlayer\n        var possibleList = minimax(maxPlayer, otherPlayer, tempSquares)\n        if (possibleList[0][0] < minValue) {\n          list = []\n          minValue = possibleList[0][0]\n          list.push([minValue, index])\n        } else if (possibleList[0][0] === minValue) {\n          list.push([minValue, index])\n        }\n      }\n    }\n    //console.log(\"minimax,\" + minValue);\n  }\n  return list;\n}\n\nfunction alphabetaPrunning(maxPlayer, currPlayer, alpha, beta, squares) {\n  var otherPlayer = (currPlayer === 'X') ? 'O' : 'X';\n  var winner = calculateWinner(squares);\n  if (winner === maxPlayer) {\n    return [[1, -1]];\n  } else if (winner !== null) {\n    return [[-1, -1]];\n  } else if (checkDraw(squares)) {\n    return [[0, -1]];\n  }\n\n  var list = [];\n  if (maxPlayer === currPlayer) {\n    var maxValue = -99999\n    for (var index = 0; index < squares.length; index++) {\n      if (squares[index] === null) {\n        var tempSquares = squares.slice();\n        tempSquares[index] = currPlayer\n        var possibleList = alphabetaPrunning(maxPlayer, otherPlayer, alpha, beta, tempSquares)\n        if (possibleList[0][0] > maxValue) {\n          list = []\n          maxValue = possibleList[0][0]\n          list.push([maxValue, index])\n        } else if (possibleList[0][0] === maxValue) {\n          list.push([maxValue, index])\n        }\n        if (maxValue > alpha) {\n          alpha = maxValue\n        }\n        if (alpha >= beta) {\n          break;\n        }\n      }\n    }\n  } else {\n    var minValue = 99999\n    for (var index = 0; index < squares.length; index++) {\n      if (squares[index] === null) {\n        var tempSquares = squares.slice();\n        tempSquares[index] = currPlayer\n        var possibleList = alphabetaPrunning(maxPlayer, otherPlayer, alpha, beta, tempSquares)\n        if (possibleList[0][0] < minValue) {\n          list = []\n          minValue = possibleList[0][0]\n          list.push([minValue, index])\n        } else if (possibleList[0][0] === minValue) {\n          list.push([minValue, index])\n        }\n        if (minValue < beta) {\n          beta = minValue\n        }\n        if (alpha >= beta) {\n          break;\n        }\n      }\n    }\n  }\n  return list;\n}\n\nfunction highlightWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  var formats = [\n    'square', 'square', 'square',\n    'square', 'square', 'square',\n    'square', 'square', 'square'\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      formats[a] = 'squareHighlighted'\n      formats[b] = 'squareHighlighted'\n      formats[c] = 'squareHighlighted'\n    }\n  }\n  return formats;\n}\n\nfunction checkDraw(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true\n}"],"sourceRoot":""}